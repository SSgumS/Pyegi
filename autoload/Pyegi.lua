--[[
You might want to install pyonfx and pyyaml through cmd using:
pip install pyonfx
pip install pyyaml


]]--

script_name = "Pyegi"
script_description = "."
script_version = "0.0.1"
script_author = "DrunkSimurgh & SSgumS"
script_namespace = "Pyegi"

--include('karaskel.lua')
local json = require 'Azarakhsh.json'

function main(sub,sel)
	local python_path = "C:/Python39/python.exe" --the path to your python.exe
	local sc_dir = "C:/Users/saman/AppData/Roaming/Aegisub/automation/autoload/PythonScripts/" --the path to the python scripts
	local dir_table = scandir(sc_dir)
	
	local ADD = aegisub.dialog.display
	local btns = {"Apply", "Settings", "Cancel"}
	local main_gui={
		{x=0,y=0,class="label",name="choose_label",label="Please select a script:"},
		{x=1,y=0,class="dropdown",name="tscript",items=dir_table,value=dir_table[1]}
	}
	local btn, res = ADD(main_gui, btns, {ok="Apply", cancel="Cancel"})
    if btn=="Apply" then
		local psya = sc_dir..res["tscript"].."/".."gui_params.json" --the path for the yaml file containing controls' spec
		local y_in = str_from(psya)
		local controls_table = json.decode(y_in)
		local btns2 = controls_table.Buttons
		local inputs_gui={}
		for _, items1 in pairs(controls_table.Controls) do
			table.insert(inputs_gui,{class=items1.class,name=items1.name,x=items1.x,y=items1.y,width=items1.width,height=items1.height,label=items1.label,hint=items1.hint,text=items1.text,value=items1.value,min=items1.min,max=items1.max,step=items1.step,items=items1.items})
		end
		local btn2, res2 = ADD(inputs_gui, btns2, {ok=btns[1], cancel=btns[-1]})
		
		if btn2 == btns[1] then
			--Building the string resembling the current subtitle file only with selected line(s) to be sent to the python script.
			local str = ""
			local info_header, style_header = true, true
			for i=1,#sub do
				local l = sub[i]
				if l.class == "info" then
					if info_header then
						if str == "" then
							str = "[Script Info]".."\n".."; Script generated by Pyegi".."\n".."; http://www.aegisub.org/"
						else
							str = str.."\n\n".."[Script Info]".."\n".."; Script generated by Pyegi".."\n".."; http://www.aegisub.org/"
						end
						info_header = false
					end
					str = str.."\n"..l.raw
				end
				if l.class == "style" then
					if style_header then
						if str == "" then
							str = "[V4+ Styles]".."\n".."Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"
						else
							str = str.."\n\n".."[V4+ Styles]".."\n".."Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"
						end
						style_header = false
					end
					str = str.."\n"..l.raw
				end
			end
			str = str.."\n\n".."[Events]".."\n".."Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text"
			for _, i in ipairs(sel) do
				local l = sub[i]
				str = str.."\n"..l.raw
				l.comment = true
				sub[i] = l
			end
			
			--Saving the created string in a file.
			local out = assert(io.open(sc_dir.."InputSubtitle.ass", "wb"))
			out:write(str)
			assert(out:close())
			
			--Running the python script and getting the result
			local pspa = sc_dir..res["tscript"].."/"..scandir_f(sc_dir..res["tscript"], "py") --the path for the python script
			local handle = io.popen(python_path.." "..pspa.." "..sc_dir)
			handle:close()
			
			--Converting the result to ass lines.
			local psya = sc_dir..scandir_f(sc_dir, "txt") --the path for the txt file containing python script output
			local all_lines = lines_from(psya)
			local l2 = {}
			l2["class"]="dialogue" l2["comment"]=false l2["layer"]=0 l2["start_time"]=0 l2["end_time"]=0 l2["style"]="" l2["actor"]="" l2["margin_l"]=0 l2["margin_r"]=0 l2["margin_t"]=0 l2["effect"]="" l2["text"]=""
			for counter1=1,(#all_lines/11) do
				local line_number = tonumber(all_lines[11*(counter1-1) + 1])
				l2.layer = tonumber(all_lines[11*(counter1-1) + 2])
				l2.start_time = tonumber(all_lines[11*(counter1-1) + 3])
				l2.end_time = tonumber(all_lines[11*(counter1-1) + 4])
				l2.style = all_lines[11*(counter1-1) + 5]
				l2.actor = all_lines[11*(counter1-1) + 6]
				l2.margin_l = tonumber(all_lines[11*(counter1-1) + 7])
				l2.margin_r = tonumber(all_lines[11*(counter1-1) + 8])
				l2.margin_t = tonumber(all_lines[11*(counter1-1) + 9])
				l2.effect = all_lines[11*(counter1-1) + 10]
				l2.text = all_lines[11*(counter1-1) + 11]
				sub.insert(sel[line_number]+1, l2)
			end
		end
	end
	
	aegisub.set_undo_point(script_name)
end

--Source: https://stackoverflow.com/a/11130774
function scandir(directory)
    local i, t, popen = 0, {}, io.popen
	local pfile = popen('dir "'..directory..'" /b /ad')
    for filename in pfile:lines() do
		if filename then
			i = i + 1
			t[i] = filename
		end
    end
    pfile:close()
    return t
end

function scandir_f(directory, ext) --ext: file extension (string)
    local t, popen = "", io.popen
	local pfile = popen('dir "'..directory..'" /b /a-d')
    for filename in pfile:lines() do
		filename = filename:match(".*%."..ext.."$")
		if filename then
			t = filename
		end
    end
    pfile:close()
    return t
end

--Source (with modification): https://stackoverflow.com/a/11204889
-- see if the file exists
function file_exists(file)
  local f = assert(io.open(file, "rb"))
  if f then assert(f:close()) end
  return f ~= nil
end
-- get all lines from a file, returns an empty 
-- list/table if the file does not exist
function lines_from(file)
  if not file_exists(file) then return {} end
  local lines = {}
  for line in io.lines(file) do 
    lines[#lines + 1] = line
  end
  return lines
end
-- get the string from a file, returns nil if the file does not exist
function str_from(file)
  if not file_exists(file) then return nil end
  local f = assert(io.open(file, "rb"))
  local str = f:read("*a")
  assert(f:close())
  return str
end

-- Register the macro
aegisub.register_macro(script_name, script_description, main)
